diff --git a/homeassistant/components/bbb_gpio.py b/homeassistant/components/bbb_gpio.py
new file mode 100644
index 0000000..36de153
--- /dev/null
+++ b/homeassistant/components/bbb_gpio.py
@@ -0,0 +1,67 @@
+"""
+Support for controlling GPIO pins of a Beaglebone Black.
+
+For more details about this platform, please refer to the documentation at
+https://home-assistant.io/components/bbb_gpio/
+"""
+# pylint: disable=import-error
+import logging
+
+from homeassistant.const import (
+    EVENT_HOMEASSISTANT_START, EVENT_HOMEASSISTANT_STOP)
+
+REQUIREMENTS = ['Adafruit_BBIO==0.0.30']
+DOMAIN = "bbb_gpio"
+_LOGGER = logging.getLogger(__name__)
+
+
+# pylint: disable=no-member
+def setup(hass, config):
+    """Setup the Beaglebone Black GPIO component."""
+    import Adafruit_BBIO.GPIO as GPIO
+
+    def cleanup_gpio(event):
+        """Stuff to do before stopping."""
+        GPIO.cleanup()
+
+    def prepare_gpio(event):
+        """Stuff to do when home assistant starts."""
+        hass.bus.listen_once(EVENT_HOMEASSISTANT_STOP, cleanup_gpio)
+
+    hass.bus.listen_once(EVENT_HOMEASSISTANT_START, prepare_gpio)
+    return True
+
+
+def setup_output(port):
+    """Setup a GPIO as output."""
+    import Adafruit_BBIO.GPIO as GPIO
+    GPIO.setup(port, GPIO.OUT)
+
+
+def setup_input(port, pull_mode):
+    """Setup a GPIO as input."""
+    import Adafruit_BBIO.GPIO as GPIO
+    GPIO.setup(port, GPIO.IN,
+               GPIO.PUD_DOWN if pull_mode == 'DOWN' else GPIO.PUD_UP)
+
+
+def write_output(port, value):
+    """Write a value to a GPIO."""
+    import Adafruit_BBIO.GPIO as GPIO
+    GPIO.output(port, value)
+
+
+def read_input(port):
+    """Read a value from a GPIO."""
+    import Adafruit_BBIO.GPIO as GPIO
+    return GPIO.input(port)
+
+
+def edge_detect(port, event_callback, bounce):
+    """Add detection for RISING and FALLING events."""
+    import Adafruit_BBIO.GPIO as GPIO
+    GPIO.add_event_detect(
+        port,
+        GPIO.BOTH,
+        callback=event_callback,
+        bouncetime=bounce)
diff --git a/homeassistant/components/binary_sensor/bbb_gpio.py b/homeassistant/components/binary_sensor/bbb_gpio.py
new file mode 100644
index 0000000..0c5a0eb
--- /dev/null
+++ b/homeassistant/components/binary_sensor/bbb_gpio.py
@@ -0,0 +1,72 @@
+"""
+Support for binary sensor using BBB GPIO.
+
+For more details about this platform, please refer to the documentation at
+https://home-assistant.io/components/binary_sensor.bbb_gpio/
+"""
+import logging
+
+import homeassistant.components.bbb_gpio as bbb_gpio
+from homeassistant.components.binary_sensor import BinarySensorDevice
+from homeassistant.const import DEVICE_DEFAULT_NAME
+
+DEFAULT_PULL_MODE = "UP"
+DEFAULT_BOUNCETIME = 50
+DEFAULT_INVERT_LOGIC = False
+
+DEPENDENCIES = ['bbb_gpio']
+_LOGGER = logging.getLogger(__name__)
+
+
+# pylint: disable=unused-argument
+def setup_platform(hass, config, add_devices, discovery_info=None):
+    """Setup the Beaglebone Black GPIO devices."""
+    pull_mode = config.get('pull_mode', DEFAULT_PULL_MODE)
+    bouncetime = config.get('bouncetime', DEFAULT_BOUNCETIME)
+    invert_logic = config.get('invert_logic', DEFAULT_INVERT_LOGIC)
+
+    binary_sensors = []
+    ports = config.get('ports')
+    for port_num, port_name in ports.items():
+        binary_sensors.append(BBBGPIOBinarySensor(
+            port_name, port_num, pull_mode, bouncetime, invert_logic))
+    add_devices(binary_sensors)
+
+
+# pylint: disable=too-many-arguments, too-many-instance-attributes
+class BBBGPIOBinarySensor(BinarySensorDevice):
+    """Represent a binary sensor that uses Beaglebone Black GPIO."""
+
+    def __init__(self, name, port, pull_mode, bouncetime, invert_logic):
+        """Initialize the BBB binary sensor."""
+        # pylint: disable=no-member
+        self._name = name or DEVICE_DEFAULT_NAME
+        self._port = port
+        self._pull_mode = pull_mode
+        self._bouncetime = bouncetime
+        self._invert_logic = invert_logic
+
+        bbb_gpio.setup_input(self._port, self._pull_mode)
+        self._state = bbb_gpio.read_input(self._port)
+
+        def read_gpio(port):
+            """Read state from GPIO."""
+            self._state = bbb_gpio.read_input(self._port)
+            self.update_ha_state()
+
+        bbb_gpio.edge_detect(self._port, read_gpio, self._bouncetime)
+
+    @property
+    def should_poll(self):
+        """No polling needed."""
+        return False
+
+    @property
+    def name(self):
+        """Return the name of the sensor."""
+        return self._name
+
+    @property
+    def is_on(self):
+        """Return the state of the entity."""
+        return self._state != self._invert_logic
diff --git a/homeassistant/components/switch/bbb_gpio.py b/homeassistant/components/switch/bbb_gpio.py
new file mode 100644
index 0000000..7f13bdb
--- /dev/null
+++ b/homeassistant/components/switch/bbb_gpio.py
@@ -0,0 +1,68 @@
+"""
+Allows to configure a switch using BBB GPIO.
+
+For more details about this platform, please refer to the documentation at
+https://home-assistant.io/components/switch.bbb_gpio/
+"""
+
+import logging
+
+import homeassistant.components.bbb_gpio as bbb_gpio
+from homeassistant.const import DEVICE_DEFAULT_NAME
+from homeassistant.helpers.entity import ToggleEntity
+
+DEFAULT_INVERT_LOGIC = False
+
+DEPENDENCIES = ['bbb_gpio']
+_LOGGER = logging.getLogger(__name__)
+
+
+# pylint: disable=unused-argument
+def setup_platform(hass, config, add_devices, discovery_info=None):
+    """Setup the Beaglebone Black GPIO devices."""
+    invert_logic = config.get('invert_logic', DEFAULT_INVERT_LOGIC)
+
+    switches = []
+    ports = config.get('ports')
+    for port, name in ports.items():
+        switches.append(BBBGPIOSwitch(name, port, invert_logic))
+    add_devices(switches)
+
+
+class BBBGPIOSwitch(ToggleEntity):
+    """Representation of a Beaglebone Black GPIO."""
+
+    def __init__(self, name, port, invert_logic):
+        """Initialize the pin."""
+        self._name = name or DEVICE_DEFAULT_NAME
+        self._port = port
+        self._invert_logic = invert_logic
+        self._state = False
+        bbb_gpio.setup_output(self._port)
+
+    @property
+    def name(self):
+        """Return the name of the switch."""
+        return self._name
+
+    @property
+    def should_poll(self):
+        """No polling needed."""
+        return False
+
+    @property
+    def is_on(self):
+        """Return true if device is on."""
+        return self._state
+
+    def turn_on(self):
+        """Turn the device on."""
+        bbb_gpio.write_output(self._port, 0 if self._invert_logic else 1)
+        self._state = True
+        self.update_ha_state()
+
+    def turn_off(self):
+        """Turn the device off."""
+        bbb_gpio.write_output(self._port, 1 if self._invert_logic else 0)
+        self._state = False
+        self.update_ha_state()
